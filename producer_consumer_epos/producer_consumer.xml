<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>const int iterations = 100;

const int BUF_SIZE =16;

int buffer[BUF_SIZE];


//Names of semaphores
const int empty_slot = 0;
const int full_slot = 1;


//Names of processes
const int producer = 0;
const int consumer = 1;


const int M = 3;  //Number of semaphores
const int N = 2;  //Number of processes

chan semWait[M][N];
chan semSignal[M][N];
chan semGo[M][N];

</declaration><template><name x="5" y="5">Consumer</name><declaration>int i = 0;
int out = 0;

void consume()
{
	int c = buffer[out];
	out = (out + 1) % BUF_SIZE;
	i ++;
}</declaration><location id="id0" x="288" y="-16"><name x="232" y="-40">DONE</name></location><location id="id1" x="432" y="-16"></location><location id="id2" x="624" y="-16"></location><location id="id3" x="624" y="144"><name x="648" y="128">CS</name></location><location id="id4" x="528" y="272"></location><init ref="id1"/><transition><source ref="id1"/><target ref="id0"/><label kind="guard" x="300" y="-46">i &gt;= iterations</label></transition><transition><source ref="id4"/><target ref="id1"/><label kind="synchronisation" x="176" y="112">semSignal[empty_slot][consumer]!</label><nail x="432" y="272"/></transition><transition><source ref="id1"/><target ref="id2"/><label kind="guard" x="468" y="-46">i &lt; iterations</label><label kind="synchronisation" x="424" y="-64">semWait[full_slot][consumer]!</label></transition><transition><source ref="id2"/><target ref="id3"/><label kind="synchronisation" x="640" y="16">semGo[full_slot][consumer]?</label></transition><transition><source ref="id3"/><target ref="id4"/><label kind="assignment" x="608" y="208">consume()</label></transition></template><template><name>Semaphore</name><parameter>const int id,  const int queue_size, const int init_val</parameter><declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration><location id="id5" x="384" y="64"><committed/></location><location id="id6" x="608" y="320"><committed/></location><location id="id7" x="352" y="96"><name x="288" y="64">overflow</name></location><location id="id8" x="480" y="192"></location><init ref="id5"/><transition><source ref="id5"/><target ref="id8"/><label kind="assignment" x="408" y="72">initialize()</label></transition><transition><source ref="id8"/><target ref="id8"/><label kind="select" x="272" y="192">p:int[0,N-1]</label><label kind="guard" x="272" y="208">count&gt;=0</label><label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label><label kind="assignment" x="272" y="240">count++</label><nail x="352" y="192"/><nail x="352" y="224"/></transition><transition><source ref="id8"/><target ref="id6"/><label kind="select" x="552" y="104">p:int[0,N-1]</label><label kind="guard" x="552" y="120">count&gt;0</label><label kind="synchronisation" x="552" y="136">semWait[id][p]?</label><label kind="assignment" x="552" y="152">count--,
q=p</label><nail x="608" y="192"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="select" x="248" y="112">p:int[0,N-1]</label><label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label><label kind="synchronisation" x="248" y="144">semWait[id][p]?</label></transition><transition><source ref="id6"/><target ref="id8"/><label kind="synchronisation" x="512" y="208">semGo[id][q]!</label></transition><transition><source ref="id8"/><target ref="id6"/><label kind="select" x="360" y="280">p:int[0,N-1]</label><label kind="guard" x="360" y="296">count&lt;0</label><label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label><label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label><nail x="480" y="320"/></transition><transition><source ref="id8"/><target ref="id8"/><label kind="select" x="480" y="-24">p:int[0,N-1]</label><label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label><label kind="synchronisation" x="480" y="8">semWait[id][p]?</label><label kind="assignment" x="480" y="24">count--,
enQueue(p)</label><nail x="480" y="64"/><nail x="512" y="64"/></transition></template><template><name x="5" y="5">Producer</name><declaration>int i = 0;
int in = 0;

void produce()
{
	// cout &lt;&lt; "P";
	buffer[in] = 900 + in;
	in = (in + 1) % BUF_SIZE;
	i ++;
}
</declaration><location id="id9" x="288" y="-16"><name x="224" y="-24">DONE</name></location><location id="id10" x="432" y="-16"></location><location id="id11" x="624" y="-16"></location><location id="id12" x="624" y="144"><name x="640" y="112">CS</name></location><location id="id13" x="528" y="272"></location><init ref="id10"/><transition><source ref="id10"/><target ref="id9"/><label kind="guard" x="308" y="-46">i &gt;= iterations</label></transition><transition><source ref="id13"/><target ref="id10"/><label kind="synchronisation" x="208" y="104">semSignal[full_slot][producer]!</label><nail x="432" y="272"/></transition><transition><source ref="id10"/><target ref="id11"/><label kind="guard" x="468" y="-46">i &lt; iterations</label><label kind="synchronisation" x="424" y="-64">semWait[empty_slot][producer]!</label></transition><transition><source ref="id11"/><target ref="id12"/><label kind="synchronisation" x="640" y="16">semGo[empty_slot][producer]?</label></transition><transition><source ref="id12"/><target ref="id13"/><label kind="assignment" x="608" y="208">produce()</label></transition></template><system>sem_empty_slot = Semaphore(empty_slot, BUF_SIZE, BUF_SIZE); // Queue starts empty
sem_full_slot = Semaphore(full_slot, BUF_SIZE, 0);

cons = Consumer();
prod = Producer();


//Edit system definition.
system cons, prod, sem_empty_slot, sem_full_slot;</system></nta>